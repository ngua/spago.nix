#+title: ~spago.nix~
#+export_file_name: ../README.org

üçù.‚ùÑ

* Table of Contents :toc:
- [[#introduction][Introduction]]
- [[#quick-start][Quick Start]]
- [[#motivation][Motivation]]
- [[#documentation][Documentation]]
- [[#caveats][Caveats]]
- [[#acknowledgments][Acknowledgments]]

* Introduction
~spago.nix~ is tool that aims to provide ergonomic Nix integration for Purescript projects built with [[https:github.com/purescript/spago][Spago]]. It aims to supersede tools such as [[https:github.com/justinwoo/spago2nix][ ~spago2nix~ ]] and provide the following features:

- *Zero* autogenerated Nix code for users (but see the [[#caveats][caveats]] below)
- A flakes-first workflow
- Support for easily generating flakes outputs (~devShells~, ~packages~, and ~checks~)

See the [[#motivation][Motivation]] below for more information on why ~spago.nix~ was created.

* Quick Start
1. Add ~github:ngua/spago-nix~ to your flake input
2. Add ~inputs.spago-nix.overlays.default~ to your ~overlays~ where you import ~nixpkgs~
3. Initialize a project with ~pkgs.spago-nix.spagoProject~. The only two required arguments to this function are ~src~ and ~name~ (see the [[#documentation][documentation]] for more)
4. *Optional*: If your Spago project depends on any third-party dependencies (i.e. /not/ in an upstream package set), add them to your flake inputs and include them in the ~extraSources~ argument to ~spagoProject~
5. ~spagoProject~ returns a ~flake~ attribute with some default ~packages~, ~apps~, and ~devShells~, along with functions for creating more outputs (see the [[#documentation][documentation]] for more details)

*Example*:

#+INCLUDE: "../examples/simple/flake.nix" src nix

* Motivation
The status quo for building Purescript projects with Nix is unfortunately quite lackluster. Neither Spago nor its chosen configuration language, Dhall, are particularly amenable to working in pure environments such as the Nix build sandbox. Spago's package format does not include the hashes for declared dependencies, meaning that these must be calculated somehow before fetching the sources for each dependency.

The current default choice for Purescript users wanting to build with Nix is ~spago2nix~, which is affected by these limitations. ~spago2nix~ approaches the lack of hashes by calling ~nix-prefetch-git~ for each dependency (as does ~spago.nix~, but in a different step that does not directly affect users). This also prevents ~spago2nix~ from being run in a pure environment, however. This could be worked around by using fixed-output derivations with ~spago2nix~, but that would lead to an unpleasant interface.

Because of this fundamental limitation, ~spago2nix~ requires generating and committing Nix code (its ~spago-packages.nix~). Obscure build errors can arise when users forget to run ~spago2nix generate~, which is not especially rare in my experience. ~spago2nix~ also provides a fairly limited interface that is quite far from that of ~spago~ -- if users wish to build project documentation, for example, they must write derivations by hand.

Most of the time, a user's ~spago-packages.nix~ will primarily contain the same Purescript packages from upstream package sets. Instead of requiring the user to always generate Nix package sets containing hashes for each dependency, we can generate them and then store them centrally in a repository. This emulates package sets like ~nodePackages~ and, most importantly, allows us to create a suitable package set for users in a pure environment, thus freeing them from needing to generated Nix code. See [[file:./docs/how-it-works.org][how ~spago.nix~ works]] for more details on its approach.

* Documentation
# The paths need to be set to `./doc/...` since this will be exported to `../README.org`
- [[file:./docs/reference.org][Reference]]
- [[file:./docs/how-it-works.org][How ~spago.nix~ works]]

* Caveats
[[file:./docs/how-it-works.org][The docs]] provide a brief overview of how ~spago.nix~ works. There are some consequences to the approach it uses, however, and ~spago.nix~ might not work with your Spago project. ~spago.nix~ is also under heavy development and some of its present limitations may be resolved in the future. In the meantime, the following caveats apply:
- All upstream package sets and third-party dependencies must be ~let~-bound in your ~packages.dhall~ ::
  ~spago.nix~ works in part by extracting information from your ~packages.dhall~, without ever fully evaluating the Dhall expression (e.g. no ~import~ statements are ever resolved to avoid network connections). The current approach to extracting this information is rather crude and only scans ~let~ bindings to gather the relevant information. The following format will work with ~spago.nix~:
  #+begin_src dhall
  -- This is extracted as the upstream package set (regardless of the name)
  let upstream =
      https://github.com/purescript/package-sets/releases/download/psc-0.x.x/packages.dhall
          sha256:0000000000000000000000000000000000000000000000000000000000000000
  -- Any subsequent `let`-bound records are interpreted as additional (third-party)
  -- dependencies
  let additions =
      { foo =
          { dependencies = [ "prelude" ]
          , repo = "https://github.com/.../foo.git"
          , version = "v0.0.0"
          }
      }

  in upstream // additions
  #+end_src
  Whereas specifying overrides and additional dependencies using ~with~ statements will not currently work, although this should hopefully be implemented soon.
- No custom package sets can be used with ~import~ statements in ~packages.dhall~ ::
  If you ~import~ a third-party Dhall package set (for example, a common set of dependencies to reduce repetition in different ~packages.dhall~ with the same dependencies), ~spago.nix~ will not work properly. The import will be extracted, but ignored. For example:
  #+begin_src dhall
  -- OK, this is an official package set and will work
  let upstream =
      https://github.com/purescript/package-sets/releases/download/psc-0.x.x/packages.dhall
          sha256:0000000000000000000000000000000000000000000000000000000000000000

  -- Will not work :(
  let special-packages =
      https://example.com/foo/bar/special-packages.dhall
          sha256:0000000000000000000000000000000000000000000000000000000000000000

  #+end_src

* Acknowledgments
TODO
